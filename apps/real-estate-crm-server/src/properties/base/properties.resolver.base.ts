/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Properties } from "./Properties";
import { PropertiesCountArgs } from "./PropertiesCountArgs";
import { PropertiesFindManyArgs } from "./PropertiesFindManyArgs";
import { PropertiesFindUniqueArgs } from "./PropertiesFindUniqueArgs";
import { CreatePropertiesArgs } from "./CreatePropertiesArgs";
import { UpdatePropertiesArgs } from "./UpdatePropertiesArgs";
import { DeletePropertiesArgs } from "./DeletePropertiesArgs";
import { AppointmentsFindManyArgs } from "../../appointments/base/AppointmentsFindManyArgs";
import { Appointments } from "../../appointments/base/Appointments";
import { Agents } from "../../agents/base/Agents";
import { PropertiesService } from "../properties.service";
@graphql.Resolver(() => Properties)
export class PropertiesResolverBase {
  constructor(protected readonly service: PropertiesService) {}

  async _propertiesItemsMeta(
    @graphql.Args() args: PropertiesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Properties])
  async propertiesItems(
    @graphql.Args() args: PropertiesFindManyArgs
  ): Promise<Properties[]> {
    return this.service.propertiesItems(args);
  }

  @graphql.Query(() => Properties, { nullable: true })
  async properties(
    @graphql.Args() args: PropertiesFindUniqueArgs
  ): Promise<Properties | null> {
    const result = await this.service.properties(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Properties)
  async createProperties(
    @graphql.Args() args: CreatePropertiesArgs
  ): Promise<Properties> {
    return await this.service.createProperties({
      ...args,
      data: {
        ...args.data,

        agent: args.data.agent
          ? {
              connect: args.data.agent,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Properties)
  async updateProperties(
    @graphql.Args() args: UpdatePropertiesArgs
  ): Promise<Properties | null> {
    try {
      return await this.service.updateProperties({
        ...args,
        data: {
          ...args.data,

          agent: args.data.agent
            ? {
                connect: args.data.agent,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Properties)
  async deleteProperties(
    @graphql.Args() args: DeletePropertiesArgs
  ): Promise<Properties | null> {
    try {
      return await this.service.deleteProperties(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Appointments], { name: "appointmentsItems" })
  async findAppointmentsItems(
    @graphql.Parent() parent: Properties,
    @graphql.Args() args: AppointmentsFindManyArgs
  ): Promise<Appointments[]> {
    const results = await this.service.findAppointmentsItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Agents, {
    nullable: true,
    name: "agent",
  })
  async getAgent(@graphql.Parent() parent: Properties): Promise<Agents | null> {
    const result = await this.service.getAgent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
